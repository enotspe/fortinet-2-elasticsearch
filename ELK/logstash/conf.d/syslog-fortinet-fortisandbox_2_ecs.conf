input {
    pipeline {
        address => "syslog-fortinet-fortisandbox_2_ecs"
    }
}
filter {

#remove event.original for saving disk space
    #mutate{ remove_field => ["[event][original]"]  }

#validea "N/A" on ip fields

    if [cip]=="N/A" { mutate { remove_field => ["cip"] } }
    if [dstip]=="N/A" { mutate { remove_field => ["dstip"] } }
    if [ip]=="N/A" { mutate { remove_field => ["ip"] } }
    if [sip]=="N/A" { mutate { remove_field => ["sip"] } }
    if [srcip]=="N/A" { mutate { remove_field => ["srcip"] } }
    if [trueclient]=="N/A" { mutate { remove_field => ["trueclient"] } }

#rename fortisandbox fields that overlap with ECS.
    mutate {
        #rename => { "error" => "[fsa][error]" }
        #rename => { "host" => "[fsa][host]" }
        rename => { "os" => "[fsa][os]" }
        #rename => { "service" => "[fsa][service]" }
        #rename => { "url" => "[fsa][url]" }
        #rename => { "user" => "[fsa][user]" }
    }


#ecs translation
    mutate {

        #add_field => { "[ecs][version]" => "1.6.0" }

        rename => {
            "syslog5424_pri" => "[log][syslog][priority]"
            "[dstip]"=> "[destination][ip]"
            "[dstport]"=> "[destination][port]"
            "[error]"=> "[error][message]"
            "[action]"=> "[event][action]"
            "[logid]"=> "[event][code]"
            "[rsrc]"=> "[event][provider]"
            "[sharename]"=> "[file][directory]"
            "[ftype]"=> "[file][extension]"
            "[md5]"=> "[file][hash][md5]"
            "[sha1]"=> "[file][hash][sha1]"
            "[sha256]"=> "[file][hash][sha256]"
            "[fname]"=> "[file][name]"
            "[filepath]"=> "[file][path]"
            "[sizebin]"=> "[file][size]"
            "[host]"=> "[host][name]"
            "[proto]"=> "[network][protocol]"
            "[ip]"=> "[network][type]"
            "[devid]"=> "[observer][serial_number]"
            "[devhost]"=> "[observer][name]"
            "[pid]"=> "[process][pid]"
            "[cip]"=> "[source][ip]"
            "[cport]"=> "[source][port]"
            "[suser]"=> "[source][user][name]"
            "[hostname]"=> "[url][domain]"
            "[url]"=> "[url][original]"
            "[user]"=> "[user][name]"
            "[level]"=> "[log][level]"
        }

        rename => {
            "[device_id]"=> "[observer][serial_number]"
            "[devname]"=> "[observer][name]"
            "[sip]"=> "[destination][ip]"
            "[sport]"=> "[destination][port]"
            "[scaned]"=> "[event][end]"
            "[service]"=> "[network][protocol]"
            "[srcip]"=> "[source][ip]"
            "[srcport]"=> "[source][port]"
            "[susr]"=> "[source][user][name]"
            "[sid]"=> "[source][user][id]"
        }

        rename =>{
            "[unauthuser]"=> "[source][user][name]"
        }

    }


    #convert scanstart, scanend, stime, etime
    if [scanstart] {
        date {
            match => [ "scanstart", "UNIX" ]
            timezone => "%{[event][timezone]}"
            target => "[event][start]"
            tag_on_failure => ["_dateparsefailure_scanstart"]
            remove_field => [ "scanstart" ]
        }
    }
    if [stime] {
        date {
            match => [ "stime", "UNIX" ]
            timezone => "%{[event][timezone]}"
            target => "[event][start]"
            tag_on_failure => ["_dateparsefailure_stime"]
            remove_field => [ "stime" ]
        }
    }
    if [scanend] {
        date {
            match => [ "scanend", "UNIX" ]
            timezone => "%{[event][timezone]}"
            target => "[event][end]"
            tag_on_failure => ["_dateparsefailure_scanend"]
            remove_field => [ "scanend" ]
        }
    }
    if [etime] {
        date {
            match => [ "etime", "UNIX" ]
            timezone => "%{[event][timezone]}"
            target => "[event][end]"
            tag_on_failure => ["_dateparsefailure_etime"]
            remove_field => [ "etime" ]
        }
    }
}
output {
    pipeline {
        send_to => "syslog-fortinet-common_ecs-output"
    }
}
